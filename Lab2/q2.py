S_BOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Inverse S-box for InvSubBytes
INV_S_BOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Round constants for key expansion
RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def hex_to_bytes(hex_str):
    """Convert hex string to list of bytes"""
    hex_clean = ''.join(c for c in hex_str if c.isalnum())
    return [int(hex_clean[i:i+2], 16) for i in range(0, len(hex_clean), 2)]

def bytes_to_hex(bytes_list):
    """Convert list of bytes to hex string"""
    return ''.join(f'{b:02X}' for b in bytes_list)

def string_to_bytes(text):
    """Convert string to list of bytes"""
    return [ord(c) for c in text]

def bytes_to_string(bytes_list):
    """Convert list of bytes to string"""
    return ''.join(chr(b) for b in bytes_list)

def pad_message(msg):
    """PKCS7 padding to 16-byte blocks"""
    pad_len = 16 - (len(msg) % 16)
    return msg + chr(pad_len) * pad_len

def unpad_message(msg):
    """Remove PKCS7 padding"""
    return msg[:-ord(msg[-1])] if msg else msg

def xor_bytes(a, b):
    """XOR two byte lists"""
    return [a[i] ^ b[i] for i in range(len(a))]

def sub_bytes(state):
    """Apply S-box substitution"""
    return [S_BOX[b] for b in state]

def inv_sub_bytes(state):
    """Apply inverse S-box substitution"""
    return [INV_S_BOX[b] for b in state]

def shift_rows(state):
    """Shift rows transformation"""
    # Convert to 4x4 matrix and shift
    matrix = [state[i:i+4] for i in range(0, 16, 4)]
    matrix[1] = matrix[1][1:] + matrix[1][:1]  # Shift row 1 left by 1
    matrix[2] = matrix[2][2:] + matrix[2][:2]  # Shift row 2 left by 2  
    matrix[3] = matrix[3][3:] + matrix[3][:3]  # Shift row 3 left by 3
    return [b for row in matrix for b in row]

def inv_shift_rows(state):
    """Inverse shift rows transformation"""
    # Convert to 4x4 matrix and shift right
    matrix = [state[i:i+4] for i in range(0, 16, 4)]
    matrix[1] = matrix[1][-1:] + matrix[1][:-1]  # Shift row 1 right by 1
    matrix[2] = matrix[2][-2:] + matrix[2][:-2]  # Shift row 2 right by 2
    matrix[3] = matrix[3][-3:] + matrix[3][:-3]  # Shift row 3 right by 3
    return [b for row in matrix for b in row]

def gf_mult(a, b):
    """Galois Field multiplication"""
    result = 0
    for _ in range(8):
        if b & 1:
            result ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11b
        b >>= 1
    return result & 0xff

def mix_columns(state):
    """Mix columns transformation"""
    result = []
    for i in range(0, 16, 4):
        col = state[i:i+4]
        result.extend([
            gf_mult(0x02, col[0]) ^ gf_mult(0x03, col[1]) ^ col[2] ^ col[3],
            col[0] ^ gf_mult(0x02, col[1]) ^ gf_mult(0x03, col[2]) ^ col[3],
            col[0] ^ col[1] ^ gf_mult(0x02, col[2]) ^ gf_mult(0x03, col[3]),
            gf_mult(0x03, col[0]) ^ col[1] ^ col[2] ^ gf_mult(0x02, col[3])
        ])
    return result

def inv_mix_columns(state):
    """Inverse mix columns transformation"""
    result = []
    for i in range(0, 16, 4):
        col = state[i:i+4]
        result.extend([
            gf_mult(0x0e, col[0]) ^ gf_mult(0x0b, col[1]) ^ gf_mult(0x0d, col[2]) ^ gf_mult(0x09, col[3]),
            gf_mult(0x09, col[0]) ^ gf_mult(0x0e, col[1]) ^ gf_mult(0x0b, col[2]) ^ gf_mult(0x0d, col[3]),
            gf_mult(0x0d, col[0]) ^ gf_mult(0x09, col[1]) ^ gf_mult(0x0e, col[2]) ^ gf_mult(0x0b, col[3]),
            gf_mult(0x0b, col[0]) ^ gf_mult(0x0d, col[1]) ^ gf_mult(0x09, col[2]) ^ gf_mult(0x0e, col[3])
        ])
    return result

def add_round_key(state, round_key):
    """Add round key (XOR with state)"""
    return xor_bytes(state, round_key)

def expand_key(key):
    """Generate all round keys from main key"""
    # Convert key to bytes if it's hex string
    if isinstance(key, str):
        key_bytes = hex_to_bytes(key)
    else:
        key_bytes = key
    
    # Initialize with original key
    expanded = key_bytes[:]
    
    # Generate 10 more rounds (11 total for AES-128)
    for round_num in range(10):
        # Take last 4 bytes
        temp = expanded[-4:]
        
        # Rotate left by 1
        temp = temp[1:] + temp[:1]
        
        # Apply S-box
        temp = [S_BOX[b] for b in temp]
        
        # XOR with round constant
        temp[0] ^= RCON[round_num]
        
        # XOR with bytes from 4 positions back
        for i in range(4):
            temp[i] ^= expanded[-16 + i]
        expanded.extend(temp)
        
        # Generate next 3 words
        for _ in range(3):
            temp = []
            for i in range(4):
                temp.append(expanded[-4 + i] ^ expanded[-16 + i])
            expanded.extend(temp)
    
    # Split into round keys (16 bytes each)
    return [expanded[i:i+16] for i in range(0, len(expanded), 16)]

def aes_encrypt_block(plaintext_bytes, round_keys):
    """Encrypt single 16-byte block"""
    state = plaintext_bytes[:]
    
    # Initial round key addition
    state = add_round_key(state, round_keys[0])
    
    # 9 main rounds
    for round_num in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[round_num])
    
    # Final round (no mix columns)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])
    
    return state

def aes_decrypt_block(ciphertext_bytes, round_keys):
    """Decrypt single 16-byte block"""
    state = ciphertext_bytes[:]
    
    # Reverse final round
    state = add_round_key(state, round_keys[10])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    
    # Reverse 9 main rounds
    for round_num in range(9, 0, -1):
        state = add_round_key(state, round_keys[round_num])
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
    
    # Reverse initial round
    state = add_round_key(state, round_keys[0])
    
    return state

def aes_encrypt(plaintext, key):
    """Encrypt message using AES-128"""
    # Pad message
    padded = pad_message(plaintext)
    
    # Generate round keys
    round_keys = expand_key(key)
    
    # Encrypt each 16-byte block
    result = []
    for i in range(0, len(padded), 16):
        block = string_to_bytes(padded[i:i+16])
        encrypted_block = aes_encrypt_block(block, round_keys)
        result.extend(encrypted_block)
    
    return bytes_to_hex(result)

def aes_decrypt(ciphertext_hex, key):
    """Decrypt message using AES-128"""
    # Convert hex to bytes
    ciphertext_bytes = hex_to_bytes(ciphertext_hex)
    
    # Generate round keys
    round_keys = expand_key(key)
    
    # Decrypt each 16-byte block
    result = []
    for i in range(0, len(ciphertext_bytes), 16):
        block = ciphertext_bytes[i:i+16]
        decrypted_block = aes_decrypt_block(block, round_keys)
        result.extend(decrypted_block)
    
    # Convert to string and remove padding
    padded_text = bytes_to_string(result)
    return unpad_message(padded_text)

# Test with your data
message = "A"
key = "0123456789ABCDEF0123456789ABCDEF"

print(f"Original: '{message}'")
print(f"Key: {key}")

ciphertext = aes_encrypt(message, key)
print(f"Encrypted: {ciphertext}")

decrypted = aes_decrypt(ciphertext, key)
print(f"Decrypted: '{decrypted}'")

print(f"Match: {message == decrypted}")

print(f"\nMessage length: {len(message)} characters")
print(f"Padded length: {len(pad_message(message))} characters")
print(f"Key length: {len(key)} hex characters ({len(hex_to_bytes(key))} bytes)")
print(f"Ciphertext length: {len(ciphertext)} hex characters ({len(hex_to_bytes(ciphertext))} bytes)")
